// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String        @unique
  password      String
  expoPushToken String?
  forgot        String?
  disciplinas   Disciplina[]
  agenda        Agenda[]
  anotacao      Anotacao[]
  tarefa        Tarefa[]
  notificao     Notificacao[]
}

model Disciplina {
  id          Int      @id @default(autoincrement())
  name        String
  details     String?
  obrigatoria Int?
  dependencia Int?
  User        Usuario? @relation(fields: [userId], references: [id])
  userId      Int?
  tarefas     Tarefa[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tarefa {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  date         DateTime
  status       TaskStatus
  priority     TaskPriority
  disciplinaId Int?
  Disciplina   Disciplina?   @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)
  userId       Int?
  User         Usuario?      @relation(fields: [userId], references: [id])
  notificacoes Notificacao[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum TaskStatus {
  PENDING
  COMPLETED
  IN_PROGRESS
}

enum TaskPriority {
  BAIXA
  MEDIA
  ALTA
}

enum AgendaType {
  TRABALHO
  PROVA
  EVENTO
}

model Agenda {
  id           Int           @id @default(autoincrement())
  description  String
  date         DateTime
  tipo         AgendaType
  User         Usuario       @relation(fields: [userId], references: [id])
  userId       Int
  notificacoes Notificacao[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Anotacao {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  User        Usuario  @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notificacao {
  id        Int      @id @default(autoincrement())
  descricao String
  dataEnvio DateTime @default(now())
  lida      Boolean  @default(false)
  agendada  Boolean  @default(false)
  userId    Int
  User      Usuario  @relation(fields: [userId], references: [id])
  tarefaId  Int?
  Tarefa    Tarefa?  @relation(fields: [tarefaId], references: [id], onDelete: Cascade)
  agendaId  Int?
  Agenda    Agenda?  @relation(fields: [agendaId], references: [id], onDelete: Cascade)
}
